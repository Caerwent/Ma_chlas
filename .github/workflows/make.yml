name: Build Atalierou

on:
  push:
    branches: [ master ]
    tags:
      - "v*.*.*"
  pull_request:
    branches: [ master ]

env:
  IS_RELEASE: ${{ startsWith(github.ref, 'refs/tags/v') }}
  IS_SNAPSHOT: ${{ !startsWith(github.ref, 'refs/tags/v') }}

jobs:
  version:
    name: "Determine version"
    runs-on: ubuntu-latest
    outputs:
      CURRENT_VERSION: ${{ steps.get-version.outputs.CURRENT_VERSION }}

    steps:
    - name: "Get version"
      id: get-version
      run: |

        if [[ "$IS_RELEASE" == 'true' ]]; then echo "CURRENT_VERSION=${{ github.head_ref || github.ref_name }} ">> "$GITHUB_OUTPUT" ; fi
        if [[ "$IS_RELEASE" != 'true' ]]; then echo "CURRENT_VERSION=$(date '+%Y.%m.%d')" >> "$GITHUB_OUTPUT" ; fi
        
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    needs: version

    env:
      CURRENT_VERSION: ${{ needs.version.outputs.CURRENT_VERSION }}

    strategy:
      matrix:
        os: [ubuntu-22.04, macos-latest, windows-latest]
        # ARCH: [x86_64, i386]
        ARCH: [x86_64]
        include:
           - os: ubuntu-22.04
             build_script: ./make_linux.sh
             qtInstallHost: 'linux'
             artifact_ext: AppImage 
             qtModules: 'all'
             qtArch: 'gcc_64'
           - os: macos-latest
             build_script: ./make_macos.sh
             qtInstallHost: 'mac'
             artifact_ext: dmg 
             qtModules: 'all'
             qtArch: 'clang_64'
           - os: windows-latest
             build_script: .\make_windows.ps1
             qtInstallHost: 'windows'
             artifact_ext: zip 
             qtModules: 'qtshadertools qtmultimedia qtimageformats'
             qtArch: 'win64_mingw'
    runs-on: ${{ matrix.os }}       
    steps:

    - uses: actions/checkout@v4
    - name: "Install venv"
      if: ${{ matrix.os != 'windows-latest' }}
      run: |
        mkdir ~/.venv
        python3 -m venv ~/.venv
        source ~/.venv/bin/activate

    - name: "Install FUSE2 on ubuntu-22.04"
      if: ${{ matrix.os == 'ubuntu-22.04' }}
      run: |
        sudo add-apt-repository universe
        sudo apt install libfuse2

 #   - name: "Install FUSE2 on ubuntu-24.04"
 #     if: ${{ matrix.os == 'ubuntu-24.04' }}
 #     run: |
 #       sudo add-apt-repository universe
 #       sudo apt install libfuse2t64
 #   - name: "Cache Qt"
 #     id: cache-qt
 #     uses: actions/cache@v1  # not v2!
 #     with:
 #       path: ../Qt
 #       key: ${{ runner.os }}-$${{secrets.USE_NEW_CACHE}}-QtCache

 # https://ddalcino.github.io/aqt-list-server/        
    - name: "Install Qt"
      uses: jurplel/install-qt-action@v4
      with:
 #       cached: ${{ steps.cache-qt.outputs.cache-hit }}
        host: ${{matrix.qtInstallHost}} 
        target: 'desktop'
        version: '6.7.1'
        arch: ${{matrix.qtArch}}
        set-env: 'true'
        aqtversion: '==3.1.*'
        modules: ${{matrix.qtModules}}
        
    - name: "Install mingw tools if Windows"
      if: ${{ matrix.os == 'windows-latest' }}
      run: |
        python3 -m aqt install-tool windows desktop tools_mingw90 -O ${{env.QT_ROOT_DIR}}
        
    - name: "launch make script"
      working-directory: .
      env:
        QT_DIR: ${{env.QT_ROOT_DIR}}
        ARCH_NAME: ${{matrix.ARCH}}
        CURRENT_VERSION: ${{env.CURRENT_VERSION}}
      run: ${{matrix.build_script}}
    
    - name: "Archive artifacts"
      uses: actions/upload-artifact@v4
      with:
        name: Atalierou_${{env.CURRENT_VERSION}}_${{matrix.ARCH}}.${{matrix.artifact_ext}}
        path: Atalierou_${{env.CURRENT_VERSION}}_${{matrix.ARCH}}.${{matrix.artifact_ext}}
        
    - name: "Release"
      uses: softprops/action-gh-release@v2
      if: startsWith(github.ref, 'refs/tags/v')
      with:
        files: Atalierou_${{env.CURRENT_VERSION}}_${{matrix.ARCH}}.${{matrix.artifact_ext}}
